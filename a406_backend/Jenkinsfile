pipeline {
    agent any

    environment {
        GIT_BRANCH = 'main'
        GITHUB_REPO_URL = 'https://github.com/hanjaegyeong/Fillit.git'
        DOCKER_IMAGE_NAME = 'fillit'
        DOCKER_CONTAINER_NAME = 'fillit-container'
        DOCKER_PORT = '8081'
    }

    stages {

        /* 1. GitHub에서 코드 체크아웃 */
        stage('Checkout') {
                steps {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                            git branch: "${GIT_BRANCH}",
                                credentialsId: 'github-credentials',
                                url: "${GITHUB_REPO_URL}"
                        }
                    }
                }
            }

        /* 2. Gradle 빌드 */
        stage('Build') {
            steps {
                dir('a406_backend') {
                    sh """
                        chmod +x ./gradlew
                        ./gradlew --no-daemon clean build \\
                            -Dspring.redis.host=redis
                    """
                }
            }
        }

        /* 3. Docker 이미지 빌드 */
        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -t ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} \\
                                 -f a406_backend/Dockerfile a406_backend
                """
            }
        }

        /* 4. Docker Hub 로그인 */
        stage('Docker Hub Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]) {
                    sh 'docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS'
                }
            }
        }

        /* 5. Docker Hub에 이미지 푸시 */
        stage('Push Docker Image') {
            steps {
                sh """
                    docker tag ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} jaegyeong223/fillit:${BUILD_NUMBER}
                    docker push jaegyeong223/fillit:${BUILD_NUMBER}
                """
            }
        }

        /* 6. MySQL 배포 */
        stage('Deploy MySQL to Kubernetes') {
            steps {
                echo 'Deploying MySQL to Kubernetes...'
                sh 'kubectl apply -f a406_backend/k8s/mysql.yaml'
            }
        }

        /* 7. Redis 배포 */
        stage('Deploy Redis to Kubernetes') {
            steps {
                echo 'Deploying Redis to Kubernetes...'
                sh 'kubectl apply -f a406_backend/k8s/redis.yaml'
            }
        }

        /* 8. 애플리케이션 배포 */
        stage('Deploy Application to Kubernetes') {
            steps {
                script {
                    echo 'Deploying application to Kubernetes...'

                    // Jenkins Secret file -> K8s Secret 생성
                    withCredentials([file(credentialsId: 'fillit-secret-file', variable: 'ENVF')]) {
                        sh 'kubectl create secret generic fillit-secret --from-env-file="$ENVF" --dry-run=client -o yaml | kubectl apply -f -'
                    }

                    // 비민감 env 파일 -> K8s ConfigMap 생성
                    sh 'kubectl create configmap fillit-config --from-env-file=a406_backend/k8s/fillit-config.env --dry-run=client -o yaml | kubectl apply -f -'

                    // Deployment 템플릿 치환 후 적용
                    sh 'envsubst < a406_backend/k8s/fillit-deployment.yaml.template > a406_backend/k8s/fillit-deployment.yaml'
                    sh 'kubectl apply -f a406_backend/k8s/fillit-deployment.yaml'

                    // 배포 완료 대기 + 재시작
                    sh 'kubectl rollout status deployment/fillit-deployment'
                    sh 'kubectl rollout restart deployment fillit-deployment'

                    // HPA 설정
                    sh 'kubectl autoscale deployment fillit-deployment --cpu-percent=50 --min=1 --max=10'

                    // 모니터링 리소스 적용
                    sh 'kubectl apply -f a406_backend/k8s/prometheus-configmap.yaml -n monitoring'
                    sh 'kubectl apply -f a406_backend/k8s/prometheus.yaml -n monitoring'
                    sh 'kubectl apply -f a406_backend/k8s/grafana-ingress.yaml'
                    sh 'kubectl apply -f a406_backend/k8s/fillit-podmonitor.yaml'
                }
            }
        }
    }
}
