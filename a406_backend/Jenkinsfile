pipeline {
    agent any

    environment {
        GIT_BRANCH = 'dev_back'
        GITLAB_REPO_URL = 'https://lab.ssafy.com/s12-webmobile2-sub1/S12P11A406.git'
        DOCKER_IMAGE_NAME = 'fillit'
        DOCKER_CONTAINER_NAME = 'fillit-container'
        DOCKER_PORT = '8081'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'gitlab-credentials-id', usernameVariable: 'GITLAB_USERNAME', passwordVariable: 'GITLAB_PASSWORD')]) {
                        git branch: "${GIT_BRANCH}",
                            credentialsId: 'gitlab-credentials-id',
                            url: "${GITLAB_REPO_URL}"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                dir('a406_backend') {
                    sh """
                        chmod +x ./gradlew
                        ./gradlew clean build \
                            -Djwt.secret-key="$JWT_SECRET_KEY" \\
                            -Dspring.datasource.url="$DB_URL" \\
                            -Dspring.datasource.username="$DB_USERNAME" \\
                            -Dspring.datasource.password="$DB_PASSWORD" \\
                            -Dspring.mail.password="$MAIL_PASSWORD"
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -t ${DOCKER_IMAGE_NAME}:latest \
                                 -t ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} \
                                 -f a406_backend/Dockerfile a406_backend
                """
            }
        }

        // Docker Hub 로그인 단계
        stage('Docker Hub Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]) {
                    sh 'docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS'
                }
            }
        }

        // 도커 이미지 레지스트리에 푸시
        stage('Push Docker Image') {
            steps {
                sh """
                    docker tag ${DOCKER_IMAGE_NAME}:latest jaegyeong223/fillit:${BUILD_NUMBER}
                    docker push jaegyeong223/fillit:${BUILD_NUMBER}
                """
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // RBAC 먼저 적용 (권한 문제 방지)
                    sh 'kubectl apply -f a406_backend/k8s/cert-manager-rbac.yaml'

                    // 템플릿 파일에 환경변수 치환
                    sh 'envsubst < a406_backend/k8s/fillit-deployment.yaml.template > a406_backend/k8s/fillit-deployment.yaml'

                    // Kubernetes 클러스터에 매니페스트 적용
                    sh 'kubectl apply -f a406_backend/k8s/fillit-deployment.yaml'
                    sh 'kubectl apply -f a406_backend/k8s/fillit-service.yaml'

                    // cert-manager가 정상적으로 실행될 때까지 대기 (최대 120초)
                    sh '''
                    set -e
                    for i in {1..12}; do
                        if kubectl get pods -n cert-manager | grep -E "Running|Completed" | grep -v "0/" > /dev/null; then
                            echo "cert-manager is running!"
                            break
                        fi
                        echo "Waiting for cert-manager to be ready..."
                        sleep 10
                    done
                    '''

                    // cert-manager 적용 (ClusterIssuer 필요)
                    sh 'kubectl apply -f a406_backend/k8s/clusterissuer.yaml'

                    // Ingress 적용
                    sh 'kubectl apply -f a406_backend/k8s/ingress.yaml'
                }
            }
        }

    }
}
