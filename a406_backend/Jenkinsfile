pipeline {
    agent any

    environment {
        GIT_BRANCH = 'main'
        GITHUB_REPO_URL = 'https://github.com/hanjaegyeong/Fillit.git'
        DOCKER_IMAGE_NAME = 'fillit'
        DOCKER_CONTAINER_NAME = 'fillit-container'
        DOCKER_PORT = '8081'
    }

    stages {

        /* 1. GitHub에서 코드 체크아웃 */
        stage('Checkout') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        git branch: "${GIT_BRANCH}",
                            credentialsId: 'github-credentials',
                            url: "${GITHUB_REPO_URL}"
                    }
                }
            }
        }

        /* 2. Gradle 빌드 */
        stage('Build') {
            steps {
                dir('a406_backend') {
                    sh '''
                        set -eu
                        chmod +x ./gradlew
                        ./gradlew --no-daemon clean build -x test \
                            -Dspring.redis.host=redis
                    '''
                }
            }
        }

        /* 3. Docker 이미지 빌드 & 푸시 */
        stage('Build & Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]) {
                    sh '''
                        set -eu
                        IMAGE="jaegyeong223/fillit:${BUILD_NUMBER}"
                        docker build -t "$IMAGE" -f a406_backend/Dockerfile a406_backend
                        echo "$DOCKER_HUB_PASS" | docker login -u "$DOCKER_HUB_USER" --password-stdin
                        docker push "$IMAGE"
                        echo "FILLIT_IMAGE=$IMAGE" > /tmp/fillit-image.env
                    '''
                }
            }
        }

        /* 4. Redis 배포 */
        stage('Deploy Redis to Kubernetes') {
            steps {
                echo 'Deploying Redis to Kubernetes...'
                sh '''
                    set -eu
                    kubectl apply -f a406_backend/k8s/redis.yaml
                '''
            }
        }

        /* 5. RabbitMQ 배포 */
        stage('Deploy RabbitMQ to Kubernetes') {
            steps {
                echo 'Deploying RabbitMQ to Kubernetes...'
                sh '''
                    set -eu
                    kubectl apply -f a406_backend/k8s/rabbitmq-deploy.yaml
                    kubectl apply -f a406_backend/k8s/rabbitmq-service.yaml
                    kubectl rollout status deployment/rabbitmq --timeout=5m
                '''
            }
        }

        /* 6. 애플리케이션 배포 */
        stage('Deploy Application to Kubernetes') {
            steps {
                script {
                    echo 'Deploying application to Kubernetes...'
                    withCredentials([file(credentialsId: 'fillit-secret-file', variable: 'ENVF')]) {
                        sh '''
                            set -eu

                            # Secret/ConfigMap 생성
                            kubectl create secret generic fillit-secret --from-env-file="$ENVF" --dry-run=client -o yaml | kubectl apply -f -
                            kubectl create configmap fillit-config --from-env-file=a406_backend/k8s/fillit-config.env --dry-run=client -o yaml | kubectl apply -f -

                            # envsubst 치환
                            export $(cat /tmp/fillit-image.env | xargs)
                            envsubst < a406_backend/k8s/fillit-deployment.yaml.template | kubectl apply -f -

                            # 배포 완료 대기
                            kubectl rollout status deployment/fillit-deployment --timeout=5m

                            # 실제 적용된 이미지 확인
                            kubectl get deploy fillit-deployment -o jsonpath='{.spec.template.spec.containers[0].image}'; echo
                        '''
                    }
                }
            }
        }

        /* 7. HPA 설정 */
        stage('Configure HPA') {
            steps {
                sh '''
                    set -eu
                    kubectl autoscale deployment fillit-deployment --cpu-percent=50 --min=1 --max=10 || true
                    kubectl get hpa
                '''
            }
        }

        /* 8. 모니터링 리소스 적용 */
        stage('Deploy Monitoring Resources') {
            steps {
                sh '''
                    set -eu
                    kubectl get ns monitoring >/dev/null 2>&1 || kubectl create ns monitoring

                    kubectl apply -f a406_backend/k8s/prometheus-configmap.yaml -n monitoring
                    kubectl apply -f a406_backend/k8s/prometheus.yaml -n monitoring
                    kubectl apply -f a406_backend/k8s/grafana-ingress.yaml
                    kubectl apply -f a406_backend/k8s/fillit-podmonitor.yaml
                '''
            }
        }
    }
}
