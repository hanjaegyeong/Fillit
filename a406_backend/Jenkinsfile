pipeline {
    agent any

    environment {
        GIT_BRANCH = 'dev_back'
        GITLAB_REPO_URL = 'https://lab.ssafy.com/s12-webmobile2-sub1/S12P11A406.git'
        DOCKER_IMAGE_NAME = 'fillit'
        DOCKER_CONTAINER_NAME = 'fillit-container'
        DOCKER_PORT = '8081'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'gitlab-credentials-id', usernameVariable: 'GITLAB_USERNAME', passwordVariable: 'GITLAB_PASSWORD')]) {
                        git branch: "${GIT_BRANCH}",
                            credentialsId: 'gitlab-credentials-id',
                            url: "${GITLAB_REPO_URL}"
                    }
                }
            }
        }

        // 테스트용 Redis 실행: 빌드(테스트) 전에 로컬 Docker에서 Redis를 실행합니다.
        stage('Start Redis for Tests') {
            steps {

                echo 'Starting Redis for tests...'
                // 기존의 redis-test 컨테이너가 있으면 삭제
                sh 'docker rm -f redis-test || true'
                // 새 Redis 컨테이너 실행
                sh 'docker run -d --name redis-test -p 6379:6379 redis:6.2'
            }
        }

        // 애플리케이션 빌드 및 테스트 (Redis가 실행 중이어야 테스트가 성공함)
        stage('Build') {
            steps {
                dir('a406_backend') {
                    sh """
                        chmod +x ./gradlew
                        ./gradlew clean build \\
                            -Djwt.secret-key="$JWT_SECRET_KEY" \\
                            -Dspring.datasource.url="$DB_URL" \\
                            -Dspring.datasource.username="$DB_USERNAME" \\
                            -Dspring.datasource.password="$DB_PASSWORD" \\
                            -Dspring.mail.password="$MAIL_PASSWORD"
                    """
                }
            }
        }

        // 테스트 완료 후 테스트용 Redis 컨테이너 정리
        stage('Stop Redis for Tests') {
            steps {
                echo 'Stopping Redis test container...'
                sh 'docker rm -f redis-test'
            }
        }

        // Docker 이미지 빌드
        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -t ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} \\
                                 -f a406_backend/Dockerfile a406_backend
                """
            }
        }

        // Docker Hub 로그인
        stage('Docker Hub Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]) {
                    sh 'docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASS'
                }
            }
        }

        // Docker Hub에 이미지 푸시
        stage('Push Docker Image') {
            steps {
                sh """
                    docker tag ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} jaegyeong223/fillit:${BUILD_NUMBER}
                    docker push jaegyeong223/fillit:${BUILD_NUMBER}
                """
            }
        }

        // Kubernetes 클러스터에 Redis 배포
        stage('Deploy Redis to Kubernetes') {
            steps {
                echo 'Deploying Redis to Kubernetes...'
                // a406_backend/k8s/redis.yaml 파일에는 Deployment와 Service가 모두 포함.
                sh 'kubectl apply -f a406_backend/k8s/redis.yaml'
            }
        }

        // Kubernetes 클러스터에 애플리케이션 배포
        stage('Deploy Application to Kubernetes') {
            steps {
                script {
                    echo 'Deploying application to Kubernetes...'
                    // 환경변수 치환을 통해 deployment 템플릿 파일 생성
                    sh 'envsubst < a406_backend/k8s/fillit-deployment.yaml.template > a406_backend/k8s/fillit-deployment.yaml'
                    // 애플리케이션 Deployment와 Service 적용
                    sh 'kubectl apply -f a406_backend/k8s/fillit-deployment.yaml'
                    sh 'kubectl apply -f a406_backend/k8s/fillit-service.yaml'
                    // 강제 롤아웃 재시작으로 최신 이미지 적용
                    sh 'kubectl rollout restart deployment fillit-deployment'
                    sh """
                        kubectl set env deployment/fillit-deployment \\
                            JWT_SECRET_KEY="$JWT_SECRET_KEY" \\
                            DB_URL="$DB_URL" \\
                            DB_USERNAME="$DB_USERNAME" \\
                            DB_PASSWORD="$DB_PASSWORD" \\
                            MAIL_PASSWORD="$MAIL_PASSWORD" \\
                            GOOGLE_ACCESS_TOKEN_API="$GOOGLE_ACCESS_TOKEN_API" \\
                            GOOGLE_CLIENT_ID="$GOOGLE_CLIENT_ID" \\
                            GOOGLE_CLIENT_SECRET="$GOOGLE_CLIENT_SECRET" \\
                            GOOGLE_GET_USER_INFO_API="$GOOGLE_GET_USER_INFO_API" \\
                            GOOGLE_REDIRECT_URI="$GOOGLE_REDIRECT_URI" \\
                            GOOGLE_SCOPE="$GOOGLE_SCOPE" \\
                            KAKAO_ACCESS_TOKEN_API="$KAKAO_ACCESS_TOKEN_API" \\
                            KAKAO_CLIENT_ID="$KAKAO_CLIENT_ID" \\
                            KAKAO_CLIENT_SECRET="$KAKAO_CLIENT_SECRET" \\
                            KAKAO_GET_USER_INFO_API="$KAKAO_GET_USER_INFO_API" \\
                            KAKAO_REDIRECT_URI="$KAKAO_REDIRECT_URI" \\
                            NAVER_ACCESS_TOKEN_API="$NAVER_ACCESS_TOKEN_API" \\
                            NAVER_CLIENT_ID="$NAVER_CLIENT_ID" \\
                            NAVER_CLIENT_SECRET="$NAVER_CLIENT_SECRET" \\
                            NAVER_GET_USER_INFO_API="$NAVER_GET_USER_INFO_API" \\
                            NAVER_REDIRECT_URI="$NAVER_REDIRECT_URI" \\
                            AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \\
                            AWS_REGION="$AWS_REGION" \\
                            AWS_S3_BUCKET_NAME="$AWS_S3_BUCKET_NAME" \\
                            AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \\
                            YOUTUBE_API_KEY="$YOUTUBE_API_KEY" \\
                            YOUTUBE_API_URL="$YOUTUBE_API_URL" \\
                            GEMINI_API_KEY="$GEMINI_API_KEY" \\
                            EC2_SERVER_URL="$EC2_SERVER_URL" \\
                            FLICKR_API_KEY="$FLICKR_API_KEY" \\
                            SPRING_REDIS_HOST="redis" \\
                            SPRING_REDIS_PORT="6379"
                    """
                }
            }
        }
    }
}
