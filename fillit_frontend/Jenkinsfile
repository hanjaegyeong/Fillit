pipeline {
    agent {
        // Node.js와 npm이 포함된 공식 Node.js 22 이미지 사용
        docker { image 'node:22' }
    }

    environment {
        GIT_BRANCH = 'dev_front'
        GITLAB_REPO_URL = 'https://lab.ssafy.com/s12-webmobile2-sub1/S12P11A406.git'
        DOCKER_IMAGE_NAME = 'fillit-front'
        DOCKER_CONTAINER_NAME = 'fillit-front-container'
        DOCKER_PORT = '3000'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'gitlab-credentials-id',
                                                       usernameVariable: 'GITLAB_USERNAME',
                                                       passwordVariable: 'GITLAB_PASSWORD')]) {
                        git branch: "${GIT_FRONT_BRANCH}",
                            credentialsId: 'gitlab-credentials-id',
                            url: "${GITLAB_FRONT_REPO_URL}"
                    }
                }
            }
        }

        stage('Install & Build') {
            steps {
                script {
                    // 의존성 설치 후 React + TypeScript 빌드 (보통 package.json에 "build" 스크립트가 정의되어 있음)
                    sh """
                        npm install
                        export VITE_API_BASE_URL=${VITE_API_BASE_URL}
                        npm run build
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Dockerfile이 프로젝트 루트에 있다고 가정
                    sh """
                        docker build -t ${DOCKER_IMAGE_NAME}:latest \
                                     -t ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} \
                                     -f Dockerfile .
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // 기존 컨테이너가 있다면 중지 및 삭제 후 새 컨테이너 실행
                    sh """
                        docker stop ${DOCKER_CONTAINER_NAME} || true
                        docker rm ${DOCKER_CONTAINER_NAME} || true
                        docker run -d -p ${DOCKER_PORT}:8080 --name ${DOCKER_CONTAINER_NAME} \\
                            -e VITE_API_BASE_URL=${VITE_API_BASE_URL} \\
                            ${DOCKER_IMAGE_NAME}:latest
                    """
                }
            }
        }
    }
}
