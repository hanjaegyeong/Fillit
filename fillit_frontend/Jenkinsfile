pipeline {
    agent {
        docker { image 'node:22' }
    }

    environment {
        GIT_BRANCH = 'dev_front'
        GITLAB_REPO_URL = 'https://lab.ssafy.com/s12-webmobile2-sub1/S12P11A406.git'
        DOCKER_IMAGE_NAME = 'fillit-front'
        DOCKER_CONTAINER_NAME = 'fillit-front-container'
        DOCKER_PORT = '3000'
        VITE_API_BASE_URL = "${env.VITE_API_BASE_URL}"
        HOME = "${env.WORKSPACE}"  // npm이 HOME을 사용하도록 설정
        NPM_CONFIG_USERCONFIG = "${env.WORKSPACE}/.npmrc"  // npmrc를 현재 작업 디렉토리로 변경
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'gitlab-credentials-id',
                                                       usernameVariable: 'GITLAB_USERNAME',
                                                       passwordVariable: 'GITLAB_PASSWORD')]) {
                        git branch: "${GIT_BRANCH}",
                            credentialsId: 'gitlab-credentials-id',
                            url: "${GITLAB_REPO_URL}"
                    }
                }
            }
        }

        stage('Install & Build') {
            steps {
                dir('fillit_frontend') {
                    sh """
                        # npm 전역 설정을 사용하지 않도록 변경
                        export NPM_CONFIG_USERCONFIG=\$WORKSPACE/.npmrc

                        # npm 캐시를 Jenkins 작업공간 내로 설정
                        npm config set cache \$WORKSPACE/.npm --userconfig \$NPM_CONFIG_USERCONFIG

                        # 캐시 정리 및 검증
                        npm cache clean --force
                        npm cache verify

                        # package-lock.json 기반 깨끗한 설치
                        npm ci

                        # 환경 변수 적용 후 빌드
                        export VITE_API_BASE_URL=${VITE_API_BASE_URL}
                        npm run build
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('fillit_frontend') {
                    sh """
                        docker build -t ${DOCKER_IMAGE_NAME}:latest \
                                     -t ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} \
                                     -f Dockerfile .
                    """
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh """
                        docker stop ${DOCKER_CONTAINER_NAME} || true
                        docker rm ${DOCKER_CONTAINER_NAME} || true
                        docker run -d -p ${DOCKER_PORT}:3000 --name ${DOCKER_CONTAINER_NAME} \\
                            -e VITE_API_BASE_URL=${VITE_API_BASE_URL} \\
                            ${DOCKER_IMAGE_NAME}:latest
                    """
                }
            }
        }
    }
}
