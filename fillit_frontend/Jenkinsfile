pipeline {
    agent any
    environment {
        // 브랜치 이름은 단순히 dev_front (필요에 따라 변경)
        GIT_BRANCH = 'dev_front'
        // GitLab 저장소 URL
        GITLAB_REPO_URL = 'https://lab.ssafy.com/s12-webmobile2-sub1/S12P11A406.git'
        // Docker 이미지 및 컨테이너 이름, 포트 설정
        DOCKER_IMAGE_NAME = 'fillit-front'
        DOCKER_CONTAINER_NAME = 'fillit-front-container'
        DOCKER_PORT = '3000'
        // VITE_API_BASE_URL은 Jenkins에서 미리 설정되어 있다고 가정
        VITE_API_BASE_URL = "${env.VITE_API_BASE_URL}"
    }
    stages {
        stage('Checkout') {
            steps {
                // Git 저장소에서 코드를 체크아웃합니다.
                // 브랜치 이름 앞에 "*/"를 붙이면 원격 브랜치(예: origin/dev_front)를 올바르게 찾는 데 도움이 됩니다.
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false,
                    userRemoteConfigs: [[
                        url: "${GITLAB_REPO_URL}",
                        credentialsId: 'gitlab-credentials-id'
                    ]]
                ])
            }
        }
        stage('Install & Build') {
            steps {
                // 프로젝트 폴더(예: 'fillit_frontend')로 이동하여 npm 명령어 실행
                // 만약 프로젝트 루트에 package.json이 있다면 dir()는 생략해도 됩니다.
                dir('fillit_frontend') {
                    // 의존성 설치 및 빌드 (VITE_API_BASE_URL을 빌드 시 사용)
                    sh 'npm install'
                    sh "VITE_API_BASE_URL=${VITE_API_BASE_URL} npm run build"
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                // Dockerfile이 있는 폴더(예: 'fillit_frontend')로 이동하여 Docker 이미지를 빌드합니다.
                dir('fillit_frontend') {
                    sh """
                        docker build -t ${DOCKER_IMAGE_NAME}:latest \
                                     -t ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} \
                                     -f Dockerfile .
                    """
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    // 기존에 실행 중인 컨테이너가 있으면 중지하고 삭제한 후, 새 컨테이너를 실행합니다.
                    sh "docker stop ${DOCKER_CONTAINER_NAME} || true"
                    sh "docker rm ${DOCKER_CONTAINER_NAME} || true"
                    sh """
                        docker run -d -p ${DOCKER_PORT}:80 --name ${DOCKER_CONTAINER_NAME} \\
                            -e VITE_API_BASE_URL=${VITE_API_BASE_URL} \\
                            ${DOCKER_IMAGE_NAME}:latest
                    """
                }
            }
        }
    }
}
