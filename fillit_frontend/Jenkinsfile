pipeline {
    agent any
    environment {
        GIT_BRANCH = 'refs/heads/dev_front'
        GITLAB_REPO_URL = 'https://lab.ssafy.com/s12-webmobile2-sub1/S12P11A406.git'
        DOCKER_IMAGE_NAME = 'fillit-front'
        DOCKER_CONTAINER_NAME = 'fillit-front-container'
        DOCKER_PORT = '3000'
        VITE_API_BASE_URL = "${env.VITE_API_BASE_URL}"
        // HOME을 WORKSPACE로 설정하여 npm 캐시 권한 문제를 회피
        HOME = "${env.WORKSPACE}"
    }
    stages {
        stage('Checkout & Build') {
            agent {
                docker { image 'node:22' }
            }
            steps {
                // Git 체크아웃
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'gitlab-credentials-id',
                        usernameVariable: 'GITLAB_USERNAME',
                        passwordVariable: 'GITLAB_PASSWORD'
                    )]) {
                        git branch: "${GIT_BRANCH}",
                            credentialsId: 'gitlab-credentials-id',
                            url: "${GITLAB_REPO_URL}"
                    }
                }
                // npm 설치 및 빌드
                dir('fillit_frontend') {
                    sh """
                        npm config set cache \$WORKSPACE/.npm --global
                        npm cache clean --force
                        npm cache verify
                        npm ci
                        export VITE_API_BASE_URL=${VITE_API_BASE_URL}
                        npm run build
                    """
                }
            }
        }
        stage('Build Docker Image') {
            agent {
                docker {
                    // Docker CLI가 포함된 이미지 사용
                    image 'docker:20.10'
                    // 호스트의 Docker 데몬 접근을 위해 docker.sock 마운트
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                dir('fillit_frontend') {
                    sh """
                        docker build -t ${DOCKER_IMAGE_NAME}:latest \
                                     -t ${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} \
                                     -f Dockerfile .
                    """
                }
            }
        }
        stage('Deploy') {
            agent {
                docker {
                    image 'docker:20.10'
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    // 기존 컨테이너 중지 및 삭제 후 새 컨테이너 실행
                    sh """
                        docker stop ${DOCKER_CONTAINER_NAME} || true
                        docker rm ${DOCKER_CONTAINER_NAME} || true
                        docker run -d -p ${DOCKER_PORT}:8080 --name ${DOCKER_CONTAINER_NAME} \\
                            -e VITE_API_BASE_URL=${VITE_API_BASE_URL} \\
                            ${DOCKER_IMAGE_NAME}:latest
                    """
                }
            }
        }
    }
}
